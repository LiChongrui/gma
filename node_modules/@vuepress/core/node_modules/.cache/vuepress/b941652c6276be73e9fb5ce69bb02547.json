{"remainingRequest":"D:\\github\\geoncs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\github\\geoncs\\node_modules\\@vuepress\\core\\lib\\client\\util.js","dependencies":[{"path":"D:\\github\\geoncs\\node_modules\\@vuepress\\core\\lib\\client\\util.js","mtime":1644430203596},{"path":"D:\\github\\geoncs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644430203908},{"path":"D:\\github\\geoncs\\node_modules\\babel-loader\\lib\\index.js","mtime":1644430203846}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}