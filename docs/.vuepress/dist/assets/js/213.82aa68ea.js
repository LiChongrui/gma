(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{752:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"gma-vesp-extraction-toraster-infile-outfile-resolution-attribute-none-outnodata-none-outformat-gtiff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gma-vesp-extraction-toraster-infile-outfile-resolution-attribute-none-outnodata-none-outformat-gtiff"}},[t._v("#")]),t._v(" gma.vesp.Extraction."),a("strong",[t._v("ToRaster")]),t._v("("),a("em",[t._v("InFile, OutFile, Resolution, Attribute = None, OutNoData = None, OutFormat = 'GTiff'")]),t._v(")")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("功能：")]),t._v("【矢量转栅格】。将矢量图层转换为栅格文件。")]),t._v(" "),a("p",[a("strong",[t._v("参数：")])]),t._v(" "),a("p",[t._v(" InFile："),a("code",[t._v("str")]),t._v("。输入矢量文件路径。")]),t._v(" "),a("p",[t._v(" OutFile："),a("code",[t._v("str")]),t._v("。输出栅格文件路径。")]),t._v(" "),a("p",[t._v(" Resolution："),a("code",[t._v("int")]),t._v("。输出栅格的分辨率。")]),t._v(" "),a("p",[a("strong",[t._v("可选参数：")])]),t._v(" "),a("p",[t._v(" Attribute = "),a("code",[t._v("str")]),t._v("。进行转换的矢量数据的字段。如果未设置，则生成由 0 和 1 组成的栅格，0 是 nodata 值。")]),t._v(" "),a("p",[t._v(" OutNoData = "),a("code",[t._v("float")]),t._v("。输出栅格的值无效。默认不设置（None）无效值。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"},[t._v("注意")]),a("p",[t._v("如果 Attribute 不为 None 且 OutNoData 未设置，则 OutNoData 修改为无穷大（inf）。")])]),a("p",[t._v(" OutFormat = "),a("code",[t._v("str")]),t._v("。输出栅格文件格式，默认为 GTiff。其他格式详见 rasp.ToOtherFormat 函数。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("示例：（下载 "),a("a",{attrs:{href:"/Open/China_Province_2022.7z"}},[t._v("示例矢量")]),t._v("）")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" gma "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" vesp\n\nInFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'China_Province_2022.shp'")]),t._v("\nOutFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ToRaster.tif'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按照属性表 '省级码' 列值写入栅格")]),t._v("\nvesp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Extraction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToRaster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OutFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'省级码'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("blockquote",[a("p",[t._v("结果对比：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/vesp/ToRaster.png",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);